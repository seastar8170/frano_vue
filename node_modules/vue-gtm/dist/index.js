"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGtm = exports.createGtm = void 0;
var vue_1 = require("vue");
var config_1 = require("./config");
var plugin_1 = require("./plugin");
var utils_1 = require("./utils");
var gtmPlugin;
var GTM_ID_PATTERN = /^GTM-[0-9A-Z]+$/;
/**
 * Assert that the given id is a valid GTM Container ID.
 *
 * Tested against pattern: `/^GTM-[0-9A-Z]+$/`.
 *
 * @param id A GTM Container ID.
 */
function assertIsGtmId(id) {
    if (typeof id !== "string" || !GTM_ID_PATTERN.test(id)) {
        throw new Error("GTM-ID '" + id + "' is not valid");
    }
}
/**
 * Installation procedure.
 *
 * @param app The Vue app instance.
 * @param options Configuration options.
 */
function install(app, options) {
    var e_1, _a;
    if (options === void 0) { options = { id: "" }; }
    if (Array.isArray(options.id)) {
        try {
            for (var _b = __values(options.id), _c = _b.next(); !_c.done; _c = _b.next()) {
                var idOrObject = _c.value;
                if (typeof idOrObject === "string") {
                    assertIsGtmId(idOrObject);
                }
                else {
                    assertIsGtmId(idOrObject.id);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    else {
        assertIsGtmId(options.id);
    }
    // Apply default configuration
    options = __assign(__assign({}, config_1.DEFAULT_CONFIG), options);
    // Add to vue prototype and also from globals
    gtmPlugin = new plugin_1.default(options.id, options);
    app.config.globalProperties.$gtm = gtmPlugin;
    // Handle vue-router if defined
    if (options.vueRouter) {
        void initVueRouterGuard(app, options.vueRouter, options.ignoredViews, options.trackOnNextTick);
    }
    // Load GTM script when enabled
    if (gtmPlugin.options.enabled && gtmPlugin.options.loadScript) {
        if (Array.isArray(options.id)) {
            options.id.forEach(function (id) {
                if (typeof id === "string") {
                    utils_1.loadScript(id, options);
                }
                else {
                    var newConf = __assign({}, options);
                    if (id.queryParams != null) {
                        newConf.queryParams = __assign(__assign({}, newConf.queryParams), id.queryParams);
                    }
                    utils_1.loadScript(id.id, newConf);
                }
            });
        }
        else {
            utils_1.loadScript(options.id, options);
        }
    }
    app.provide("gtm", options);
}
/**
 * Initialize the router guard.
 *
 * @param app The Vue app instance.
 * @param vueRouter The Vue router instance to attach the guard.
 * @param ignoredViews An array of route name that will be ignored.
 * @param trackOnNextTick Whether or not to call `trackView` in `Vue.nextTick`.
 */
function initVueRouterGuard(app, vueRouter, ignoredViews, trackOnNextTick) {
    if (ignoredViews === void 0) { ignoredViews = []; }
    return __awaiter(this, void 0, void 0, function () {
        var vueRouterModule, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, Promise.resolve().then(function () { return require("vue-router"); })];
                case 1:
                    vueRouterModule = _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _a = _b.sent();
                    console.warn("[VueGtm]: You tried to register 'vueRouter' for vue-gtm, but 'vue-router' was not found.");
                    return [2 /*return*/];
                case 3:
                    // Flatten routes name
                    ignoredViews = ignoredViews.map(function (view) { return view.toLowerCase(); });
                    vueRouter.afterEach(function (to, from, failure) {
                        var _a, _b, _c, _d, _e;
                        // Ignore some routes
                        if (typeof to.name !== "string" || ignoredViews.indexOf(to.name.toLowerCase()) !== -1) {
                            return;
                        }
                        // Dispatch vue event using meta gtm value if defined otherwise fallback to route name
                        var name = to.meta && typeof to.meta.gtm === "string" && !!to.meta.gtm ? to.meta.gtm : to.name;
                        if (vueRouterModule.isNavigationFailure(failure, vueRouterModule.NavigationFailureType.aborted)) {
                            if (gtmPlugin === null || gtmPlugin === void 0 ? void 0 : gtmPlugin.debugEnabled()) {
                                console.log("[VueGtm]: '" + name + "' not tracked due to navigation aborted");
                            }
                        }
                        else if (vueRouterModule.isNavigationFailure(failure, vueRouterModule.NavigationFailureType.cancelled)) {
                            if (gtmPlugin === null || gtmPlugin === void 0 ? void 0 : gtmPlugin.debugEnabled()) {
                                console.log("[VueGtm]: '" + name + "' not tracked due to navigation cancelled");
                            }
                        }
                        var additionalEventData = (_b = (_a = to.meta) === null || _a === void 0 ? void 0 : _a.gtmAdditionalEventData) !== null && _b !== void 0 ? _b : {};
                        var baseUrl = (_e = (_d = (_c = vueRouter.options) === null || _c === void 0 ? void 0 : _c.history) === null || _d === void 0 ? void 0 : _d.base) !== null && _e !== void 0 ? _e : "";
                        var fullUrl = baseUrl;
                        if (!fullUrl.endsWith("/")) {
                            fullUrl += "/";
                        }
                        fullUrl += to.fullPath.startsWith("/") ? to.fullPath.substr(1) : to.fullPath;
                        if (trackOnNextTick) {
                            void vue_1.nextTick(function () {
                                gtmPlugin === null || gtmPlugin === void 0 ? void 0 : gtmPlugin.trackView(name, fullUrl, additionalEventData);
                            });
                        }
                        else {
                            gtmPlugin === null || gtmPlugin === void 0 ? void 0 : gtmPlugin.trackView(name, fullUrl, additionalEventData);
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Create the Vue GTM instance.
 *
 * @param options Options.
 * @returns The Vue GTM plugin instance.
 */
function createGtm(options) {
    return { install: function (app) { return install(app, options); } };
}
exports.createGtm = createGtm;
var _default = { install: install };
exports.default = _default;
/**
 * Returns GTM plugin instance to be used via Composition API inside setup method.
 *
 * @returns The Vue GTM instance if the it was installed, otherwise `undefined`.
 */
function useGtm() {
    return gtmPlugin;
}
exports.useGtm = useGtm;
